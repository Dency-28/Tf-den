name: Terraform CI/CD (Testing Branch)

on:
  pull_request:
    branches: [testing]
  issue_comment:
    types: [created]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  terraform:
    name: Terraform Plan & Apply (Testing)
    runs-on: ubuntu-latest

    steps:
      - name: 🧩 Checkout Repository
        uses: actions/checkout@v4

      - name: ⚙️ Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: 💬 Detect Command (/plan or /apply)
        id: detect
        run: |
          echo "event=${{ github.event_name }}" >> $GITHUB_OUTPUT
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            COMMENT=$(echo "${{ github.event.comment.body }}" | tr '[:upper:]' '[:lower:]')
            if [[ "$COMMENT" == "/plan" ]]; then
              echo "action=plan" >> $GITHUB_OUTPUT
            elif [[ "$COMMENT" == "/apply" ]]; then
              echo "action=apply" >> $GITHUB_OUTPUT
            else
              echo "action=none" >> $GITHUB_OUTPUT
            fi
          else
            echo "action=plan" >> $GITHUB_OUTPUT
          fi

      - name: 🛑 Skip if not /plan or /apply
        if: ${{ steps.detect.outputs.action == 'none' }}
        run: echo "No action required."

      # 🔹 Define Terraform directory (change this if needed)
      - name: 🗂️ Define Terraform Working Directory
        id: setdir
        run: |
          # 👇 change this to match your real folder name
          echo "dir=terraform_infra" >> $GITHUB_OUTPUT

      # 🔹 PLAN MODE: no backend
      - name: ⚙️ Terraform Init (No Backend)
        if: ${{ steps.detect.outputs.action == 'plan' }}
        run: |
          cd ${{ steps.setdir.outputs.dir }}
          echo "⚙️ Initializing Terraform (Skipping backend)..."
          terraform init -backend=false -input=false

      - name: 📖 Terraform Validate
        if: ${{ steps.detect.outputs.action == 'plan' }}
        run: |
          cd ${{ steps.setdir.outputs.dir }}
          terraform validate

      - name: 🧩 Terraform Plan
        if: ${{ steps.detect.outputs.action == 'plan' }}
        run: |
          cd ${{ steps.setdir.outputs.dir }}
          echo "🧩 Running Terraform Plan (Skipping backend)"
          terraform plan -no-color -input=false | tee plan.txt

      - name: 💬 Comment Plan on PR
        if: ${{ steps.detect.outputs.action == 'plan' }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: terraform-plan
          path: ${{ steps.setdir.outputs.dir }}/plan.txt

      # 🔹 APPLY MODE: with backend
      - name: ⚙️ Terraform Init (With Backend)
        if: ${{ steps.detect.outputs.action == 'apply' }}
        run: |
          cd ${{ steps.setdir.outputs.dir }}
          echo "⚙️ Initializing Terraform with backend..."
          terraform init -input=false

      - name: 🚀 Terraform Apply
        if: ${{ steps.detect.outputs.action == 'apply' }}
        run: |
          cd ${{ steps.setdir.outputs.dir }}
          terraform apply -auto-approve -input=false
