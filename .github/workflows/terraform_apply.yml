name: Terraform CI/CD (Testing Branch)

on:
  issue_comment:
    types: [created]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: Terraform Backend + Infra
    runs-on: ubuntu-latest

    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issue_comment' &&
      github.event.issue.pull_request &&
      (contains(github.event.comment.body, '/plan') ||
       contains(github.event.comment.body, '/apply')))

    env:
      AWS_REGION: us-east-1
      TF_IN_AUTOMATION: true
      TF_INPUT: false
      S3_BUCKET: tf-state-dency
      BACKEND_DIR: terraform_backend
      INFRA_DIR: terraform_infra

    steps:
      # Step 1️⃣: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2️⃣: Setup AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Step 3️⃣: Create backend S3 bucket if not exists
      - name: Ensure S3 bucket exists
        run: |
          if ! aws s3api head-bucket --bucket "$S3_BUCKET" 2>/dev/null; then
            echo "S3 bucket not found. Creating..."
            aws s3api create-bucket --bucket "$S3_BUCKET" --region "$AWS_REGION" \
              --create-bucket-configuration LocationConstraint="$AWS_REGION"
          else
            echo "S3 bucket already exists."
          fi

      # Step 4️⃣: Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      # Step 5️⃣: Terraform Init (Backend)
      - name: Terraform Init (Backend)
        run: terraform -chdir=${{ env.BACKEND_DIR }} init -reconfigure

      # Step 6️⃣: Terraform Plan/Apply (Backend)
      - name: Terraform Plan/Apply (Backend)
        id: backend
        run: |
          if [[ "${{ github.event.comment.body }}" == *"/apply"* ]]; then
            terraform -chdir=${{ env.BACKEND_DIR }} apply -auto-approve > backend_output.txt
          else
            terraform -chdir=${{ env.BACKEND_DIR }} plan -no-color > backend_output.txt
          fi

      # Step 7️⃣: Terraform Init (Infra)
      - name: Terraform Init (Infra)
        run: terraform -chdir=${{ env.INFRA_DIR }} init -reconfigure

      # Step 8️⃣: Terraform Plan/Apply (Infra)
      - name: Terraform Plan/Apply (Infra)
        id: infra
        run: |
          if [[ "${{ github.event.comment.body }}" == *"/apply"* ]]; then
            terraform -chdir=${{ env.INFRA_DIR }} apply -auto-approve > infra_output.txt
          else
            terraform -chdir=${{ env.INFRA_DIR }} plan -no-color > infra_output.txt
          fi

      # Step 9️⃣: Combine & Post Output to PR comment
      - name: Post results to PR
        if: github.event_name == 'issue_comment'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            ✅ **Terraform Run Complete**

            **Triggered by:** ${{ github.actor }}
            **Mode:** ${{ contains(github.event.comment.body, '/apply') && 'Apply' || 'Plan' }}

            ### 🧩 Backend Output:
            ```
            ${{ steps.backend.outputs.stdout || 'See workflow logs for backend output.' }}
            ```

            ### 🏗️ Infra Output:
            ```
            ${{ steps.infra.outputs.stdout || 'See workflow logs for infra output.' }}
            ```

      # Step 🔟: Manual Run Summary
      - name: Show summary (manual)
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "✅ Terraform run completed manually."
