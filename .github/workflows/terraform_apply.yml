name: Terraform CI/CD (Testing → Main PR)

on:
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: read

jobs:
  terraform:
    name: Terraform Plan/Apply (Testing Branch)
    runs-on: ubuntu-latest
    if: |
      github.event.issue.pull_request != null &&
      (contains(github.event.comment.body, '/plan') || contains(github.event.comment.body, '/apply'))

    env:
      AWS_REGION: us-east-1

    steps:
      # Step 1️⃣: Checkout PR source branch (testing)
      - name: Checkout PR branch
        uses: actions/checkout@v3
        with:
          ref: refs/heads/testing

      # Step 2️⃣: Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      # Step 3️⃣: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # ───────────────────────────────
      # Step 4: Terraform Backend
      # ───────────────────────────────
      - name: Terraform Init (Backend)
        run: terraform -chdir=terraform_backend init

      - name: Terraform Plan (Backend)
        run: terraform -chdir=terraform_backend plan -no-color -out=tfplan > backend_plan.txt

      - name: Terraform Apply (Backend)
        if: contains(github.event.comment.body, '/apply')
        run: terraform -chdir=terraform_backend apply -auto-approve tfplan -no-color > backend_apply.txt

      # ───────────────────────────────
      # Step 5: Terraform Infra
      # ───────────────────────────────
      - name: Terraform Init (Infra)
        run: terraform -chdir=terraform_infra init -reconfigure

      - name: Terraform Plan (Infra)
        run: terraform -chdir=terraform_infra plan -no-color -out=tfplan > infra_plan.txt

      - name: Terraform Apply (Infra)
        if: contains(github.event.comment.body, '/apply')
        run: terraform -chdir=terraform_infra apply -auto-approve tfplan -no-color > infra_apply.txt

      # ───────────────────────────────
      # Step 6: Post output back to PR
      # ───────────────────────────────
      - name: Post Terraform Output to PR
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const planBackend = fs.existsSync('backend_plan.txt') ? fs.readFileSync('backend_plan.txt', 'utf8') : '';
            const planInfra = fs.existsSync('infra_plan.txt') ? fs.readFileSync('infra_plan.txt', 'utf8') : '';
            const applyBackend = fs.existsSync('backend_apply.txt') ? fs.readFileSync('backend_apply.txt', 'utf8') : '';
            const applyInfra = fs.existsSync('infra_apply.txt') ? fs.readFileSync('infra_apply.txt', 'utf8') : '';

            const action = context.payload.comment.body.includes('/apply') ? 'Apply' : 'Plan';
            const output = `
### 🧱 Terraform ${action} Results (Testing Branch)

**Backend**
\`\`\`
${action === 'Apply' ? applyBackend : planBackend}
\`\`\`

**Infrastructure**
\`\`\`
${action === 'Apply' ? applyInfra : planInfra}
\`\`\`
`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
