name: Terraform CI/CD (testing branch)

on:
  pull_request:
    branches: [testing]
  issue_comment:
    types: [created]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  terraform:
    runs-on: ubuntu-latest
    name: Terraform Plan & Apply

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Get PR number (if any)
        id: pr
        uses: jwalton/gh-find-current-pr@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          state: open

      - name: Detect command
        id: detect
        run: |
          echo "event=${GITHUB_EVENT_NAME}" >> $GITHUB_OUTPUT
          ACTION="none"
          if [ "$GITHUB_EVENT_NAME" = "issue_comment" ]; then
            BODY=$(jq -r .comment.body "$GITHUB_EVENT_PATH" | tr '[:upper:]' '[:lower:]')
            if echo "$BODY" | grep -q "^/plan"; then ACTION=plan; fi
            if echo "$BODY" | grep -q "^/apply"; then ACTION=apply; fi
          else
            # default on PR open/run -> plan
            ACTION=plan
          fi
          echo "action=$ACTION" >> $GITHUB_OUTPUT

      - name: Stop if not plan/apply
        if: ${{ steps.detect.outputs.action == 'none' }}
        run: |
          echo "No /plan or /apply detected. Exiting."

      ###############
      # PLAN (NO BACKEND) - DO NOT MODIFY YOUR TF FILES
      ###############
      - name: Terraform Plan (skip backend)
        if: ${{ steps.detect.outputs.action == 'plan' }}
        env:
          PR_NUMBER: ${{ steps.pr.outputs.number }}
        run: |
          set -euo pipefail
          echo "🧩 Starting /plan (backend will be ignored) ..."

          # copy infra to temp folder so repo files remain untouched
          rm -rf tf_local || true
          mkdir tf_local
          cp -r terraform_infra/* tf_local/ 2>/dev/null || true
          # if terraform_infra files are at repo root, alter above path; this matches your repo structure

          # Create a Python script to remove any backend "s3" blocks robustly
          cat > /tmp/remove_backend.py <<'PY'
import glob, io, re, sys
tf_files = glob.glob("**/*.tf", recursive=True)
pattern = re.compile(r'terraform\s*\{.*?backend\s*"s3"\s*\{.*?\}.*?\}', re.S)
for f in tf_files:
    try:
        s = io.open(f, "r", encoding="utf-8").read()
        new = pattern.sub("", s)
        if new != s:
            io.open(f, "w", encoding="utf-8").write(new)
    except Exception as e:
        print("skip", f, e, file=sys.stderr)
PY

          # run the remover inside the temp folder
          cd tf_local
          python3 /tmp/remove_backend.py

          # ensure there is at least one .tf (safety)
          if ! ls *.tf >/dev/null 2>&1; then
            echo "No .tf files found in terraform_infra after copy; aborting with error."
            exit 1
          fi

          echo "⚙️ Init (local mode) — backend will NOT be used"
          # init with backend disabled (safe local mode)
          terraform init -backend=false -input=false -no-color

          echo "✅ Validate"
          terraform fmt -check || true
          terraform validate -no-color

          echo "🧮 Plan (local only)"
          terraform plan -no-color -input=false | tee ../plan.txt || true

          # build PR comment
          {
            echo "### 🧩 Terraform Plan (LOCAL - backend ignored)"
            echo ""
            echo "_This plan ran in local mode inside the runner. S3/Dynamo were NOT used or created._"
            echo ""
            echo "<details><summary>Click to view full plan</summary>"
            echo ""
            echo '```'
            cat ../plan.txt || true
            echo '```'
            echo ""
            echo "</details>"
          } > ../plan_comment.md

      - name: Post Plan result to PR
        if: ${{ steps.detect.outputs.action == 'plan' }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          number: ${{ steps.pr.outputs.number }}
          header: "🧩 Terraform Plan Output (local)"
          path: plan_comment.md

      ###############
      # APPLY (uses backend normally)
      ###############
      - name: Terraform Apply (with backend)
        if: ${{ steps.detect.outputs.action == 'apply' }}
        run: |
          set -euo pipefail
          echo "🚀 Starting /apply: using real backend in terraform_infra ..."
          cd terraform_infra

          # initialize with backend (this will require the S3 bucket + dynamo to exist)
          terraform init -reconfigure -input=false -no-color

          echo "✅ Validate"
          terraform validate -no-color

          echo "🚀 Apply"
          terraform apply -auto-approve -input=false | tee ../apply.txt || true

          {
            echo "### 🚀 Terraform Apply Output"
            echo ""
            echo "<details><summary>Click to view apply logs</summary>"
            echo ""
            echo '```'
            cat ../apply.txt || true
            echo '```'
            echo ""
            echo "</details>"
          } > ../apply_comment.md

      - name: Post Apply result to PR
        if: ${{ steps.detect.outputs.action == 'apply' }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          number: ${{ steps.pr.outputs.number }}
          header: "🚀 Terraform Apply Output"
          path: apply_comment.md
