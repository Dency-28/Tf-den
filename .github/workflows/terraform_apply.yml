name: Terraform CI/CD (Test Branch)

on:
  pull_request:
    branches: [test]
  issue_comment:
    types: [created]
  workflow_dispatch:

jobs:
  terraform:
    name: Terraform Plan & Apply (Test)
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write
      issues: write

    env:
      AWS_REGION: us-east-1

    steps:
      # Checkout repo
      - uses: actions/checkout@v4

      # Setup Terraform
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      # Configure AWS credentials
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # â”€â”€â”€ Determine issue/PR number (works for pull_request and issue_comment) â”€â”€â”€
      - name: Determine issue/PR number
        id: determine_issue
        run: |
          # For a comment on a PR, github.event.issue.number contains the PR number.
          if [ "${{ github.event_name }}" = "issue_comment" ]; then
            echo "issue_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "issue_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          else
            echo "issue_number=" >> $GITHUB_OUTPUT
          fi

      # â”€â”€â”€ Backend Setup â”€â”€â”€
      - name: Init & Apply Backend
        run: |
          terraform -chdir=terraform_backend init -input=false
          terraform -chdir=terraform_backend apply -auto-approve

      # â”€â”€â”€ Infra Plan â”€â”€â”€
      - name: Terraform Plan
        id: plan
        run: |
          set -o pipefail
          terraform -chdir=terraform_infra init -reconfigure
          terraform -chdir=terraform_infra fmt
          terraform -chdir=terraform_infra validate
          terraform -chdir=terraform_infra plan -no-color -out=tfplan | tee plan.txt
          {
            echo '### ðŸ§© Terraform Plan Result'
            echo '<details><summary>Click to view full plan logs</summary>'
            echo ''
            echo '```'
            cat plan.txt
            echo '```'
            echo '</details>'
          } > plan_comment.md

      # â”€â”€â”€ Post Plan Output (direct API call; will not skip when issue_number present) â”€â”€â”€
      - name: Post Plan Output to PR
        if: ${{ steps.determine_issue.outputs.issue_number != '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ISSUE_NUM=${{ steps.determine_issue.outputs.issue_number }}
          REPO="${{ github.repository }}"
          # Read plan_comment.md into a JSON string safely
          if [ -f plan_comment.md ]; then
            BODY_JSON=$(jq -Rs '.' plan_comment.md)
            curl -sS -X POST \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/$REPO/issues/$ISSUE_NUM/comments" \
              -d "{\"body\": $BODY_JSON}"
            echo "Posted plan comment to issue/PR #$ISSUE_NUM"
          else
            echo "plan_comment.md not found â€” nothing to post"
            exit 1
          fi

      # â”€â”€â”€ Terraform Apply â”€â”€â”€
      - name: Terraform Apply
        if: |
          success() &&
          (
            github.event_name == 'workflow_dispatch' ||
            (github.event_name == 'issue_comment' && contains(github.event.comment.body, '/apply'))
          )
        run: |
          terraform -chdir=terraform_infra apply -auto-approve tfplan | tee apply.txt
          {
            echo '### ðŸš€ Terraform Apply Result'
            echo '<details><summary>Click to view full apply logs</summary>'
            echo ''
            echo '```'
            cat apply.txt
            echo '```'
            echo '</details>'
          } > apply_comment.md

      # â”€â”€â”€ Post Apply Output to PR (direct API call) â”€â”€â”€
      - name: Post Apply Output to PR
        if: ${{ steps.determine_issue.outputs.issue_number != '' && success() }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ISSUE_NUM=${{ steps.determine_issue.outputs.issue_number }}
          REPO="${{ github.repository }}"
          if [ -f apply_comment.md ]; then
            BODY_JSON=$(jq -Rs '.' apply_comment.md)
            curl -sS -X POST \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/$REPO/issues/$ISSUE_NUM/comments" \
              -d "{\"body\": $BODY_JSON}"
            echo "Posted apply comment to issue/PR #$ISSUE_NUM"
          else
            echo "apply_comment.md not found â€” nothing to post"
            exit 1
          fi
