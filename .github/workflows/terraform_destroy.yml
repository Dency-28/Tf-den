name: üßπ Terraform Destroy (Full Cleanup)

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  terraform-destroy:
    name: Terraform Full Destroy
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      TF_BUCKET_NAME: tf-state-dency
      TF_LOCK_TABLE: tf-state-locks

    steps:
      # 1Ô∏è‚É£ Checkout repo
      - name: üì¶ Checkout Repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup Terraform
      - name: ‚öôÔ∏è Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.0

      # 3Ô∏è‚É£ Configure AWS credentials
      - name: üîê Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 4Ô∏è‚É£ Try destroying infra (ignore backend missing errors)
      - name: üí£ Destroy Terraform Infra
        shell: bash
        run: |
          set +e
          echo "üß± Attempting to destroy infrastructure..."
          cd terraform_infra
          terraform init -input=false || echo "‚ö†Ô∏è Backend missing, switching to local..."
          if [ ! -f backend_override.tf ]; then
            cat <<EOF > backend_override.tf
            terraform {
              backend "local" {
                path = "./local.tfstate"
              }
            }
            EOF
            terraform init -reconfigure -input=false
          fi
          terraform destroy -auto-approve -input=false || true
          echo "‚úÖ Terraform infra destroy complete."

      # 5Ô∏è‚É£ Delete all versions from S3 bucket
      - name: üßπ Empty and Delete S3 + DynamoDB
        shell: bash
        run: |
          set -e
          BUCKET_NAME=${{ env.TF_BUCKET_NAME }}
          DYNAMO_TABLE=${{ env.TF_LOCK_TABLE }}

          echo "üßπ Cleaning up backend resources..."
          echo "üîπ Emptying all object versions from S3 bucket: $BUCKET_NAME"

          # Delete versions
          aws s3api list-object-versions --bucket "$BUCKET_NAME" --output json \
            --query '{Objects: Versions[].{Key: Key, VersionId: VersionId}}' > versions.json || echo '{"Objects":[]}' > versions.json
          aws s3api delete-objects --bucket "$BUCKET_NAME" --delete file://versions.json || true

          # Delete delete markers
          aws s3api list-object-versions --bucket "$BUCKET_NAME" --output json \
            --query '{Objects: DeleteMarkers[].{Key: Key, VersionId: VersionId}}' > markers.json || echo '{"Objects":[]}' > markers.json
          aws s3api delete-objects --bucket "$BUCKET_NAME" --delete file://markers.json || true

          # Double-check bucket is empty
          aws s3 rm s3://$BUCKET_NAME --recursive || true

          echo "ü™£ Deleting S3 bucket: $BUCKET_NAME"
          aws s3api delete-bucket --bucket "$BUCKET_NAME" --region ${{ env.AWS_REGION }} || true

          echo "üß± Deleting DynamoDB table: $DYNAMO_TABLE"
          aws dynamodb delete-table --table-name "$DYNAMO_TABLE" || true

          echo "‚úÖ Backend (S3 + DynamoDB) cleanup complete!"
