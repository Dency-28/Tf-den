name: Terraform Destroy

on:
  workflow_dispatch:

jobs:
  terraform-destroy:
    name: Full Infra + Backend Destroy
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      S3_BUCKET: tf-state-dency
      DYNAMO_TABLE: tf-state-locks

    steps:
      # 1Ô∏è‚É£ Checkout repo
      - name: Checkout code
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Setup Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      # 3Ô∏è‚É£ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 4Ô∏è‚É£ Destroy Terraform-managed infrastructure
      - name: Destroy Terraform-managed infrastructure
        run: |
          set +e
          cd terraform_infra
          echo "üß± Initializing Terraform for destroy..."

          terraform init -reconfigure -input=false || echo "‚ö†Ô∏è Backend missing, switching to local state..."

          if [ $? -ne 0 ]; then
            echo "üîÅ Reconfiguring Terraform to use local state..."
            rm -rf .terraform
            cat > backend_override.tf <<'EOF'
            terraform {
              backend "local" {
                path = "terraform.tfstate"
              }
            }
            EOF
            terraform init -input=false
          fi

          echo "üî• Destroying infrastructure (ignoring state mismatches)..."
          terraform destroy -auto-approve || echo "‚ö†Ô∏è Nothing to destroy or partial state, continuing..."
          cd ..

      # 5Ô∏è‚É£ Wait briefly for AWS resource release
      - name: Wait before backend cleanup
        run: |
          echo "‚è≥ Waiting for resources to fully terminate..."
          sleep 20

      # 6Ô∏è‚É£ Delete S3 backend safely
      - name: Clean up S3 backend
        run: |
          set +e
          echo "üßπ Cleaning up S3 backend..."
          aws s3api head-bucket --bucket ${S3_BUCKET} >/dev/null 2>&1
          if [ $? -eq 0 ]; then
            echo "Emptying and deleting S3 bucket: ${S3_BUCKET}"
            aws s3api delete-objects --bucket ${S3_BUCKET} \
              --delete "$(aws s3api list-object-versions \
              --bucket ${S3_BUCKET} --output=json \
              --query='{Objects: Versions[].{Key:Key,VersionId:VersionId}}')" >/dev/null 2>&1 || true
            aws s3api delete-objects --bucket ${S3_BUCKET} \
              --delete "$(aws s3api list-object-versions \
              --bucket ${S3_BUCKET} --output=json \
              --query='{Objects: DeleteMarkers[].{Key:Key,VersionId:VersionId}}')" >/dev/null 2>&1 || true
            aws s3 rb s3://${S3_BUCKET} --force || echo "‚ö†Ô∏è Bucket not empty or already deleted."
          else
            echo "‚ö†Ô∏è S3 bucket ${S3_BUCKET} not found, skipping."
          fi

      # 7Ô∏è‚É£ Delete DynamoDB table (if still exists)
      - name: Delete DynamoDB table
        run: |
          set +e
          echo "üîç Checking if DynamoDB table ${DYNAMO_TABLE} exists..."
          aws dynamodb describe-table --table-name ${DYNAMO_TABLE} >/dev/null 2>&1
          if [ $? -eq 0 ]; then
            echo "üß± Deleting DynamoDB table: ${DYNAMO_TABLE}"
            aws dynamodb delete-table --table-name ${DYNAMO_TABLE}
            aws dynamodb wait table-not-exists --table-name ${DYNAMO_TABLE}
            echo "‚úÖ DynamoDB table deleted successfully!"
          else
            echo "‚ö†Ô∏è DynamoDB table ${DYNAMO_TABLE} not found, skipping."
          fi

      # 8Ô∏è‚É£ Final confirmation
      - name: Final confirmation
        run: |
          echo "‚úÖ All Terraform infra, S3 backend, and DynamoDB table destroyed successfully!"
