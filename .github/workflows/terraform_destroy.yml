name: "üßπ Terraform Destroy (Full Cleanup)"

on:
  workflow_dispatch:
  push:
    branches:
      - destroy

permissions:
  contents: read

jobs:
  terraform-destroy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      TF_BUCKET_NAME: tf-state-dency
      TF_LOCK_TABLE: tf-state-locks

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Destroy Terraform Infrastructure (safe)
        shell: bash
        run: |
          set +e
          echo "üß± Attempting to destroy infrastructure..."
          cd terraform_infra
          terraform init -input=false
          if [ $? -ne 0 ]; then
            echo "‚ö†Ô∏è Backend missing, switching to local backend..."
            cat > backend_override.tf <<'EOF'
terraform {
  backend "local" {
    path = "./local.tfstate"
  }
}
EOF
            terraform init -reconfigure -input=false
          fi
          terraform destroy -auto-approve -input=false || true
          echo "‚úÖ Terraform infra destroy complete."

      - name: Cleanup S3 & DynamoDB
        shell: bash
        run: |
          set -e
          BUCKET_NAME=${{ env.TF_BUCKET_NAME }}
          DYNAMO_TABLE=${{ env.TF_LOCK_TABLE }}

          if aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "Deleting S3 bucket $BUCKET_NAME..."
            aws s3api list-object-versions --bucket "$BUCKET_NAME" \
              --query '{Objects: Versions[].{Key: Key, VersionId: VersionId}}' \
              --output json > versions.json || echo '{"Objects":[]}' > versions.json
            aws s3api delete-objects --bucket "$BUCKET_NAME" --delete file://versions.json || true

            aws s3api list-object-versions --bucket "$BUCKET_NAME" \
              --query '{Objects: DeleteMarkers[].{Key: Key, VersionId: VersionId}}' \
              --output json > markers.json || echo '{"Objects":[]}' > markers.json
            aws s3api delete-objects --bucket "$BUCKET_NAME" --delete file://markers.json || true

            aws s3 rm "s3://$BUCKET_NAME" --recursive || true
            aws s3api delete-bucket --bucket "$BUCKET_NAME" --region "$AWS_REGION" || true
          else
            echo "‚ö†Ô∏è S3 bucket $BUCKET_NAME not found, skipping."
          fi

          if aws dynamodb describe-table --table-name "$DYNAMO_TABLE" >/dev/null 2>&1; then
            echo "Deleting DynamoDB table $DYNAMO_TABLE..."
            aws dynamodb delete-table --table-name "$DYNAMO_TABLE" || true
          else
            echo "‚ö†Ô∏è DynamoDB table $DYNAMO_TABLE not found, skipping."
          fi

          echo "‚úÖ Cleanup complete."
