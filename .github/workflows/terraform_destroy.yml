name: "üßπ Terraform Destroy"

on:
  workflow_dispatch:

jobs:
  terraform-destroy:
    name: "Terraform Full Destroy"
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      TF_BUCKET_NAME: tf-state-dency
      TF_LOCK_TABLE: tf-state-locks

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Destroy Terraform Infrastructure (Safe Mode)
        shell: bash
        run: |
          set +e
          echo "üß± Attempting Terraform destroy..."
          cd terraform_infra
          terraform init -input=false
          if [ $? -ne 0 ]; then
            echo "‚ö†Ô∏è Backend missing, switching to local backend..."
            cat > backend_override.tf <<'EOF'
terraform {
  backend "local" {
    path = "./local.tfstate"
  }
}
EOF
            terraform init -reconfigure -input=false
          fi
          terraform destroy -auto-approve -input=false || true
          echo "‚úÖ Terraform infra destroy complete."

      - name: Cleanup Backend (S3 + DynamoDB)
        shell: bash
        run: |
          set -e
          echo "üßπ Cleaning backend..."

          BUCKET_NAME="${{ env.TF_BUCKET_NAME }}"
          DYNAMO_TABLE="${{ env.TF_LOCK_TABLE }}"

          # --- S3 cleanup (handles versioned and non-versioned buckets)
          echo "üîπ Deleting versions..."
          aws s3api list-object-versions --bucket "$BUCKET_NAME" \
            --query '{Objects: Versions[].{Key: Key, VersionId: VersionId}}' \
            --output json > versions.json || echo '{"Objects":[]}' > versions.json
          aws s3api delete-objects --bucket "$BUCKET_NAME" --delete file://versions.json || true

          echo "üîπ Deleting delete markers..."
          aws s3api list-object-versions --bucket "$BUCKET_NAME" \
            --query '{Objects: DeleteMarkers[].{Key: Key, VersionId: VersionId}}' \
            --output json > markers.json || echo '{"Objects":[]}' > markers.json
          aws s3api delete-objects --bucket "$BUCKET_NAME" --delete file://markers.json || true

          echo "üîπ Final remove of S3 bucket..."
          aws s3 rm "s3://$BUCKET_NAME" --recursive || true
          aws s3api delete-bucket --bucket "$BUCKET_NAME" --region "$AWS_REGION" || true

          # --- DynamoDB cleanup
          if aws dynamodb describe-table --table-name "$DYNAMO_TABLE" >/dev/null 2>&1; then
            echo "üß± Deleting DynamoDB table: $DYNAMO_TABLE"
            aws dynamodb delete-table --table-name "$DYNAMO_TABLE" || true
          else
            echo "‚ö†Ô∏è DynamoDB table not found, skipping."
          fi

          echo "‚úÖ Backend cleanup complete."
